---
- name: "Removes existing nodes if tag opennms-node-removal was set"
  ansible.builtin.include_tasks:
    file: removal.yml
    apply:
      tags:
        - opennms-node-removal
        - never
  tags:
    - opennms-node-removal
    - never

- name: "Verify if requisitions exists"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}/{{ onms_requisition_name }}"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  ignore_errors: true
  no_log: true
  register: requisition_exists
  tags:
    - opennms-provisioning
  delegate_to: localhost

- name: "Create requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: POST
    status_code: 202
    headers:
      Content-Type: "application/xml"
    body: "{{ lookup('template', 'requisitions_xml.j2') }}"
  no_log: true
  register: requisition_created
  when: requisition_exists.failed
  tags:
    - opennms-provisioning
  delegate_to: localhost

- name: "Create policies and detectors for requisitions (foreign-sources)"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_foreign_sources_api }}"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: POST
    status_code: 202
    headers:
      Content-Type: "application/xml"
    body: "{{ lookup('template', 'foreignSources_xml.j2') }}"
  no_log: true
  register: requisition_created
  when: requisition_exists
  tags:
    - opennms-provisioning
  delegate_to: localhost

- name: "Verify if nodes exist in requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}/{{ onms_requisition_name }}/nodes/{{ onms_host_foreignid }}"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  ignore_errors: true
  no_log: true
  register: node_exists
  when: requisition_exists
  tags:
    - opennms-provisioning
  delegate_to: localhost

- name: "Create nodes in requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}/{{ onms_requisition_name }}/nodes"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: POST
    status_code: 202
    headers:
      Content-Type: "application/xml"
    body: "{{ lookup('template', 'node_xml.j2') }}"
  no_log: false
  tags:
    - opennms-provisioning
  when: node_exists.failed
  delegate_to: localhost

# Creates a file in the root folder and writes the node definition into it.
# This is helpful if you want to change the node_xml.j2 and see the exact output.
- name: Create node defintion xml file
  ansible.builtin.template:
    src: node_xml.j2
    dest: "node_definition_{{ ansible_host }}.xml"
    mode: '0644'
  delegate_to: localhost
  tags:
    - never
    - debug

# # ansible_play-hosts:
# # List of hosts in the current play run, not limited by the serial. Failed/Unreachable hosts are excluded from this list.
# # With the condition inventory_hostname == ansible_play_hosts[-1] we run the task only for the last host in the current play
# # and ensures we run this task only once per group
- name: "Import requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}/{{ onms_requisition_name }}/import?rescanExisting=true"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: PUT
    status_code: 202
    headers:
      Content-Type: "application/xml"
  when:
    - inventory_hostname == ansible_play_hosts[-1] and skip_import | default("false") == "false"
  tags:
    - opennms-provisioning
    - opennms-requisition-import
    - opennms-node-removal
  delegate_to: localhost
