---
- name: "Verify if requisitions exists"
  ansible.builtin.uri:
    url: "{{ onms_hzn.base_rest_url }}/{{ onms_hzn.requisitions_api }}/{{ onms_requisition }}"
    user: "{{ onms_hzn.user }}"
    password: "{{ onms_hzn.password }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  ignore_errors: true
  no_log: true
  register: requisition_exists

- name: "Create requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn.base_rest_url }}/{{ onms_hzn.requisitions_api }}"
    user: "{{ onms_hzn.user }}"
    password: "{{ onms_hzn.password }}"
    method: POST
    status_code: 202
    headers:
      Content-Type: "application/xml"
    body: "{{lookup('template','requisitions_xml.j2')}}"
  no_log: true
  register: requisition_created
  when: requisition_exists.failed

- name: "Create policies and detectors for requisitions (foreign-sources)"
  ansible.builtin.uri:
    url: "{{ onms_hzn.base_rest_url }}/{{ onms_hzn.foreign_sources_api }}"
    user: "{{ onms_hzn.user }}"
    password: "{{ onms_hzn.password }}"
    method: POST
    status_code: 202
    headers:
      Content-Type: "application/xml"
    body: "{{lookup('template','foreignSources_xml.j2')}}"
  no_log: true
  register: requisition_created
  when: requisition_exists
  with_dict: "{{ onms_policies }}"

- name: "Verify if nodes exist in requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn.base_rest_url }}/{{ onms_hzn.requisitions_api }}/{{ onms_requisition }}/{{ onms_hzn.node_api }}/{{ onms_node_foreignId }}"
    user: "{{ onms_hzn.user }}"
    password: "{{ onms_hzn.password }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  ignore_errors: true
  no_log: true
  register: node_exists
  when: requisition_exists

- name: "Create nodes in requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn.base_rest_url }}/{{ onms_hzn.requisitions_api }}/{{ onms_requisition }}/nodes"
    user: "{{ onms_hzn.user }}"
    password: "{{ onms_hzn.password }}"
    method: POST
    status_code: 202
    headers:
      Content-Type: "application/xml"
    body: "{{lookup('template','node_xml.j2')}}"
  no_log: true
  register: node_created
  when: node_exists.failed 

- name: "Verify if monitored services exists"
  ansible.builtin.uri:
    url: "{{ onms_hzn.base_rest_url }}/{{ onms_hzn.requisitions_api }}/{{ onms_requisition }}/{{ onms_hzn.node_api }}/{{ onms_node_foreignId }}/{{ onms_hzn.interfaces_api }}/{{ ansible_host }}/services/{{ item }}"
    user: "{{ onms_hzn.user }}"
    password: "{{ onms_hzn.password }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  ignore_errors: true
  no_log: true
  register: service_exists
  when: node_exists
  with_items: "{{ onms_group_services | combine(onms_host_services) }}"

- name: "Create monitored services"
  ansible.builtin.uri:
    url: "{{ onms_hzn.base_rest_url }}/{{ onms_hzn.requisitions_api }}/{{ onms_requisition }}/{{ onms_hzn.node_api }}/{{ onms_node_foreignId }}/{{ onms_hzn.interfaces_api }}/{{ ansible_host }}/services/"
    user: "{{ onms_hzn.user }}"
    password: "{{ onms_hzn.password }}"
    method: POST
    status_code: 202
    headers:
      Content-Type: "application/xml"
    body: "{{ lookup('template','services_xml.j2') }}"
  no_log: true
  ignore_errors: true
  register: service_created
  when: service_exists.failed
  with_dict: "{{ onms_group_services | combine(onms_host_services) }}"

- name: "Import requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn.base_rest_url }}/{{ onms_hzn.requisitions_api }}/{{ onms_requisition }}/import?rescanExisting=true"
    user: "{{ onms_hzn.user }}"
    password: "{{ onms_hzn.password }}"
    method: PUT
    status_code: 202
    headers:
      Content-Type: "application/xml"
