---
- name: "Verify if requisitions exists"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}/{{ onms_requisition_name }}"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  ignore_errors: true
  no_log: true
  register: requisition_exists

- name: "Create requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: POST
    status_code: 202
    headers:
      Content-Type: "application/xml"
    body: "{{ lookup('template', 'requisitions_xml.j2') }}"
  no_log: true
  register: requisition_created
  when: requisition_exists.failed

- name: "Create policies and detectors for requisitions (foreign-sources)"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_foreign_sources_api }}"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: POST
    status_code: 202
    headers:
      Content-Type: "application/xml"
    body: "{{ lookup('template', 'foreignSources_xml.j2') }}"
  no_log: true
  register: requisition_created
  when: requisition_exists

- name: "Verify if nodes exist in requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}/{{ onms_requisition_name }}/{{ onms_hzn_node_api }}/{{ onms_host_foreignId }}"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  ignore_errors: true
  no_log: true
  register: node_exists
  when: requisition_exists

- name: "Create nodes in requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}/{{ onms_requisition_name }}/nodes"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: POST
    status_code: 202
    headers:
      Content-Type: "application/xml"
    body: "{{ lookup('template', 'node_xml.j2') }}"
  no_log: false
  register: node_created
  when: node_exists.failed

- name: "Verify if monitored services exists"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}/{{ onms_requisition_name }}/\
         {{ onms_hzn_node_api }}/{{ onms_host_foreignId }}/{{ onms_hzn_interfaces_api }}/{{ ansible_host }}/services/{{ item }}"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  ignore_errors: true
  no_log: true
  register: service_exists
  when: node_exists
  with_items: "{{ onms_group_services | combine(onms_host_services) }}"

- name: "Create monitored services"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}/{{ onms_requisition_name }}/\
         {{ onms_hzn_node_api }}/{{ onms_host_foreignId }}/{{ onms_hzn_interfaces_api }}/{{ ansible_host }}/services/"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: POST
    status_code: 202
    headers:
      Content-Type: "application/xml"
    body: "{{ lookup('template', 'services_xml.j2') }}"
  no_log: true
  ignore_errors: true
  register: service_created
  when: (service_exists.failed) and ( onms_group_services | combine(onms_host_services) is defined)
  #with_dict: "{{ onms_group_services | combine(onms_host_services) }}"

- name: "Import requisitions"
  ansible.builtin.uri:
    url: "{{ onms_hzn_base_rest_url }}/{{ onms_hzn_requisitions_api }}/{{ onms_requisition_name }}/import?rescanExisting=true"
    user: "{{ onms_hzn_user }}"
    password: "{{ onms_hzn_password }}"
    method: PUT
    status_code: 202
    headers:
      Content-Type: "application/xml"
